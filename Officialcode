// Define LED pins for first system (pressure indicator)
const int redLED1 = 2;
const int greenLED1 = 3;
const int redLED2 = 4;
const int greenLED2 = 5;

// Define LED pins for second system (right-of-way)
#define RED_LIGHT_1 2
#define GREEN_LIGHT_1 3
#define RED_LIGHT_2 4
#define GREEN_LIGHT_2 5

// Define sensor pins
#define SENSOR_1 A0
#define SENSOR_2 A1

// Pressure thresholds
const int pressureThreshold1 = 50;
const int pressureThreshold2 = 50;
const int threshold = 50; // Right-of-way threshold

// Variable to store last state
int lastRightOfWay = 0; // 0 = No priority, 1 = Car 1, 2 = Car 2
// Ultrasonic code
const int triggerPin = 7;
const int echoPin = 6;

int inches = 0;
int cm = 0;
int count = 0;
bool objectPreviouslyDetected = false;

long readUltrasonicDistance(int triggerPin, int echoPin)
{
  digitalWrite(triggerPin, LOW);
  delayMicroseconds(2);
  digitalWrite(triggerPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(triggerPin, LOW);
  
  // Reads the echo pin and returns duration in microseconds
  return pulseIn(echoPin, HIGH);
}

void setup() {
  // Initialize LED pins for both systems
  pinMode(redLED1, OUTPUT);
  pinMode(greenLED1, OUTPUT);
  pinMode(redLED2, OUTPUT);
  pinMode(greenLED2, OUTPUT);
  
  pinMode(RED_LIGHT_1, OUTPUT);
  pinMode(GREEN_LIGHT_1, OUTPUT);
  pinMode(RED_LIGHT_2, OUTPUT);
  pinMode(GREEN_LIGHT_2, OUTPUT);

  // Initialize sensor inputs
  pinMode(SENSOR_1, INPUT);
  pinMode(SENSOR_2, INPUT);

  // Default states: Both red
  digitalWrite(RED_LIGHT_1, HIGH);
  digitalWrite(GREEN_LIGHT_1, LOW);
  digitalWrite(RED_LIGHT_2, HIGH);
  digitalWrite(GREEN_LIGHT_2, LOW);
  // Ultrasonic setup
  pinMode(triggerPin, OUTPUT);
  pinMode(echoPin, INPUT);

  Serial.begin(9600);
  
}

void loop() {
  {
  // Read sensor values
  int pressureValue1 = analogRead(SENSOR_1);
  int pressureValue2 = analogRead(SENSOR_2);



  // LED control for pressure detection
  if (pressureValue1 > pressureThreshold1) {
    digitalWrite(redLED1, HIGH);
    digitalWrite(greenLED1, LOW);
  } else {
    digitalWrite(redLED1, LOW);
    digitalWrite(greenLED1, HIGH);
  }

  if (pressureValue2 > pressureThreshold2) {
    digitalWrite(redLED2, HIGH);
    digitalWrite(greenLED2, LOW);
  } else {
    digitalWrite(redLED2, LOW);
    digitalWrite(greenLED2, HIGH);
  }

  // Right-of-way logic
  bool car1 = pressureValue1 > threshold;
  bool car2 = pressureValue2 > threshold;

  if (car1 && !car2) {
    lastRightOfWay = 1; // Car 1 gets priority
  } else if (car2 && !car1) {
    lastRightOfWay = 2; // Car 2 gets priority
  } else if (car1 && car2 && lastRightOfWay == 0) {
    lastRightOfWay = 1; // Default to Car 1 if both pressed at the same time
  } else if (!car1 && !car2) {
    lastRightOfWay = 0; // No cars detected
  }
  
  // Control right-of-way lights
  if (lastRightOfWay == 1) {
    digitalWrite(RED_LIGHT_1, LOW);
    digitalWrite(GREEN_LIGHT_1, HIGH);
    digitalWrite(RED_LIGHT_2, HIGH);
    digitalWrite(GREEN_LIGHT_2, LOW);
  } else if (lastRightOfWay == 2) {
    digitalWrite(RED_LIGHT_1, HIGH);
    digitalWrite(GREEN_LIGHT_1, LOW);
    digitalWrite(RED_LIGHT_2, LOW);
    digitalWrite(GREEN_LIGHT_2, HIGH);
  } else {
    // Default state: Both red if no pressure detected
    digitalWrite(RED_LIGHT_1, HIGH);
    digitalWrite(GREEN_LIGHT_1, LOW);
    digitalWrite(RED_LIGHT_2, HIGH);
    digitalWrite(GREEN_LIGHT_2, LOW);
  }

  delay(750);
  }
  long duration = readUltrasonicDistance(triggerPin, echoPin);

  // Convert time to distance
  cm = duration * 0.034 / 2;     // Speed of sound: 343 m/s = 0.034 cm/Âµs
  inches = cm / 2.54;

  int threshold = 30; // Distance in cm to trigger counting

  if (cm > 0 && cm <= threshold) {
    if (!objectPreviouslyDetected) {
      count++;
      Serial.print("Object detected! Count: ");
      Serial.println(count);
      objectPreviouslyDetected = true;
    }
  } else {
    objectPreviouslyDetected = false;
  }

  delay(20);
}
